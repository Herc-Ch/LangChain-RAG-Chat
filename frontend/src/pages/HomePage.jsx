import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Spinner } from "@/components/ui/shadcn-io/spinner";
import MarkdownMessage from "@/components/markdown-message";
export default function Chat() {
  const spinner = () => (
    <div className="flex flex-col items-center justify-center space-y-3 py-6">
      <Spinner variant="infinite" className="w-10 h-10 text-emerald-800" />
      <p className="text-gray-500 text-sm font-medium animate-pulse">
        Generating Response...
      </p>
    </div>
  );

  const [messages, setMessages] = useState([]); // [{role, content}]
  const [query, setQuery] = useState("");
  const [loading, setLoading] = useState(false);
  // const useDocsMode = useState(true);

  const canSend = query.trim().length >= 3 && !loading;

  const endRef = useRef(null);
  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  async function handleSubmit(e) {
    e.preventDefault();
    if (!canSend) return;

    const text = query.trim();
    setQuery("");
    setLoading(true);

    try {
      const res = await fetch(`http://localhost:5000/answer`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        // send ONLY previous history; server appends both human+ai
        body: JSON.stringify({
          query: text,
          chat_history: messages,
        }),
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || res.statusText);

      // server returns full updated chat_history
      const uiHistory = Array.isArray(data.chat_history)
        ? [...data.chat_history]
        : [];
      const cites = Array.isArray(data.sources)
        ? [...new Set(data.sources)]
        : [];
      const modelName = data.model_name ?? "the model";

      if (cites.length) {
        for (let i = uiHistory.length - 1; i >= 0; i--) {
          if (uiHistory[i].role === "ai") {
            uiHistory[i] = {
              ...uiHistory[i],
              citations: cites,
              provenance: data.provenance,
              model_name: modelName,
            };
            break;
          }
        }
      } else {
        for (let i = uiHistory.length - 1; i >= 0; i--) {
          if (uiHistory[i].role === "ai") {
            uiHistory[i] = {
              ...uiHistory[i],
              provenance: data.provenance,
              model_name: modelName,
            };
            break;
          }
        }
      }
      setMessages(uiHistory);
    } catch (err) {
      setMessages((m) => [
        ...m,
        { role: "ai", content: "Sorry, something went wrong." },
      ]);
      console.error(err);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-6 max-w-2xl mx-auto space-y-4">
      {/* Header */}
      <header className="w-full border-b bg-background/50 backdrop-blur-sm">
        <div className="max-w-2xl mx-auto px-6 py-4 text-center">
          <h1 className="flex items-center justify-center gap-2 text-2xl font-bold tracking-tight">
            <img
              src="langchain_icon.png"
              alt="LangChain logo"
              className="h-8 w-8"
            />
            <span className="bg-gradient-to-r from-emerald-600 to-emerald-300 bg-clip-text text-transparent">
              LangChain Chat
            </span>
          </h1>
          <p className="text-sm text-muted-foreground mt-1">
            Ask questions, get answers, see sources
          </p>
        </div>
      </header>

      <div className="space-y-3">
        {messages.map((m, i) => (
          <div
            key={i}
            className={m.role === "human" ? "text-right" : "text-left"}
          >
            <div
              className={`inline-block rounded-2xl px-3 py-2 whitespace-pre-wrap ${
                m.role === "human"
                  ? "bg-primary text-primary-foreground"
                  : "bg-muted"
              }`}
            >
              <MarkdownMessage content={m.content} />

              {/* Provenance badge for AI */}
              {m.role === "ai" && (
                <div className="mt-1 text-[10px] uppercase tracking-wide">
                  {m.provenance === "docs" ? (
                    <span
                      title="This answer was generated from the documentation."
                      className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full bg-emerald-100 text-emerald-700"
                    >
                      ðŸ“– From Docs
                    </span>
                  ) : (
                    <span
                      title={`This answer was generated by ${
                        m.model_name ?? "the model"
                      } without the use of  documentation.`}
                      className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full bg-slate-100 text-slate-600"
                    >
                      ðŸ’¡ General Answer
                    </span>
                  )}
                </div>
              )}

              {/* Citations list */}
              {m.role === "ai" &&
                Array.isArray(m.citations) &&
                m.citations.length > 0 && (
                  <details className="mt-2">
                    <summary className="text-xs font-medium cursor-pointer select-none">
                      Sources
                    </summary>
                    <ol className="list-decimal pl-5 text-xs space-y-1 mt-1">
                      {m.citations.map((src, j) => (
                        <li key={j}>
                          <a
                            href={src}
                            className="underline break-all"
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            {src}
                          </a>
                        </li>
                      ))}
                    </ol>
                  </details>
                )}
            </div>
          </div>
        ))}

        {loading && spinner()}
      </div>

      <form onSubmit={handleSubmit} className="flex gap-2">
        <Input
          placeholder="Type your messageâ€¦"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          disabled={loading}
        />
        <Button type="submit" disabled={!canSend}>
          Send
        </Button>
      </form>
      <div ref={endRef} />
      {/* Footer */}
      <footer className="w-full border-t bg-background/50 backdrop-blur-sm">
        <div className="max-w-2xl mx-auto px-6 py-3 text-center text-xs text-muted-foreground">
          Powered by <span className="font-semibold">LangChain</span> &{" "}
          <span className="font-semibold">Shadcn</span>
        </div>
      </footer>
    </div>
  );
}
